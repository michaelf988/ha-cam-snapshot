blueprint:
  name: "Camera Event Notification (no AI)"
  author: "MF"
  homeassistant:
    min_version: 2024.10.0
  description: >
    Sehr einfache Kamera-Benachrichtigung für iOS: macht bei Ereignis einen Snapshot und sendet ihn
    als Anhang per Push (ohne AI, ohne Android-Optionen).
  domain: automation
  source_url: https://github.com/michaelf988/ha-cam-snapshot/blob/main/ha-cam-snapshot.yaml

  input:
    camera_entities:
      name: "Camera Entities"
      description: "Eine oder mehrere Kameras (Snapshot wird von der ersten erstellt)."
      selector:
        entity:
          multiple: true
          filter:
            domain: camera

    trigger_state:
      name: "Trigger State"
      description: "Kamera-Zustand, der das Event auslöst (z. B. recording)."
      default: "recording"
      selector:
        text:

    notify_device:
      name: "Notify Device(s)"
      description: "Zielgeräte (Home Assistant Companion App auf iOS)."
      selector:
        device:
          multiple: true
          filter:
            integration: mobile_app

    notify:
      name: "Enable Notifications"
      default: true
      selector:
        boolean:

    delay_notification:
      name: "Notification Cooldown (seconds)"
      description: "Abstand zwischen zwei Benachrichtigungen."
      default: 60
      selector:
        number:
          min: 0
          max: 86400
          mode: box
          unit_of_measurement: seconds

    notification_time:
      name: "Time Snippet in Title (optional)"
      description: "Leerlassen oder Uhrzeit-Text hinzufügen."
      default: ""
      selector:
        select:
          options:
            - label: "No Time Added"
              value: ""
            - label: "12 Hour"
              value: 'at {{ now().strftime("%I:%M %p") }}'
            - label: "24 Hour"
              value: 'at {{ now().strftime("%H:%M") }}'

    file_path:
      name: "File Path for Snapshot"
      description: "Speicherort des Snapshots (stabiler Dateiname)."
      default: "/media/snapshots/{{ camera_file_path }}/last_motion.jpg"
      selector:
        text:

    tap_navigate:
      name: "Tap Navigate (Dashboard Path)"
      default: "/lovelace/0"
      selector:
        text:

    notification_sound:
      name: "iOS Sound"
      default: "default"
      selector:
        text:

    notification_volume:
      name: "iOS Sound Volume (0..1)"
      default: 1
      selector:
        number:
          min: 0
          max: 1
          step: 0.1

    notification_critical:
      name: "iOS Critical Alert"
      default: false
      selector:
        boolean:

    cooldown:
      name: "Global Cooldown"
      description: "Verzögerung nach Aktionsende."
      default: { minutes: 10 }
      selector:
        duration: {}

# ================= Variables =================
variables:
  notify: !input notify
  delay_notification: !input delay_notification
  notification_time: !input notification_time
  file_path: !input file_path
  tap_navigate: !input tap_navigate

  notification_sound: !input notification_sound
  notification_volume: !input notification_volume
  notification_critical: !input notification_critical

  camera_entities_list: !input camera_entities
  notify_devices: !input notify_device

  # Abgeleitet
  snapshot_access_file_path: "{{ file_path | replace('/config/www','/local') | replace('/media','/media/local') }}"
  label: "Motion detected"

  camera_entity_snapshot: "{{ camera_entities_list[0] if camera_entities_list|length > 0 else '' }}"
  camera_file_path: "{{ camera_entity_snapshot.replace('camera.', '') if camera_entity_snapshot else 'camera_unknown' }}"
  camera: "{{ (camera_entities_list[0].replace('camera.', '').replace('_', ' ') | title) if camera_entities_list|length > 0 else 'Camera' }}"

  # iOS: Dienstnamen aus Device-Namen ableiten
  device_name_map: >
    {% set ns = namespace(device_names=[]) %}
    {% for dev in (notify_devices or []) %}
      {% set name = device_attr(dev, 'name') %}
      {% if name %}
        {% set ns.device_names = ns.device_names + ['mobile_app_' ~ (name | slugify)] %}
      {% endif %}
    {% endfor %}
    {{ ns.device_names }}

# ================= Meta =================
mode: single
max_exceeded: silent

# ================= Trigger =================
trigger:
  - platform: state
    entity_id: !input camera_entities
    to: !input trigger_state
    id: "camera_trigger"

# ================= Conditions =================
condition: []

# ================= Actions =================
action:
  - if:
      - condition: template
        value_template: "{{ notify }}"
    then:
      - if:
          - condition: template
            value_template: >
              {{ not this.attributes.last_triggered
                 or (now() - this.attributes.last_triggered).seconds > delay_notification }}
        then:
          # Snapshot (nur wenn eine Kamera angegeben ist)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ camera_entity_snapshot != '' }}"
                sequence:
                  - service: camera.snapshot
                    target:
                      entity_id: "{{ camera_entity_snapshot }}"
                    data:
                      filename: !input file_path

          # iOS-Benachrichtigung(en) senden
          - alias: "Notify (iOS, Snapshot Attachment)"
            repeat:
              for_each: "{{ device_name_map }}"
              sequence:
                - service: "notify.{{ repeat.item }}"
                  data:
                    title: "{{ label }} {{ notification_time }}"
                    message: "{{ camera }} has detected activity."
                    data:
                      url: !input tap_navigate
                      attachment:
                        url: "{{ snapshot_access_file_path }}"
                        content_type: JPEG
                      push:
                        interruption-level: active
                        sound:
                          name: "{{ notification_sound }}"
                          volume: "{{ notification_volume }}"
                          critical: "{{ notification_critical }}"

  # Globaler Cooldown am Ende
  - delay: !input cooldown
