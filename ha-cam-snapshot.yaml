blueprint:
  name: "Camera Event Notification 1.2.3"
  author: "MF"
  homeassistant:
    min_version: 2024.10.0
  description: >
    iOS-Kamera-Benachrichtigung mit Snapshot, optionaler Live-Analyse (llmvision.stream_analyzer),
    automatischem Erinnern (llmvision.remember) und Update der Push via Tag. Nutzt den friendly_name der Kamera.
  domain: automation
  source_url: https://github.com/michaelf988/ha-cam-snapshot/blob/main/ha-cam-snapshot.yaml

  input:

    # =======================
    # SECTION: KAMERAS
    # =======================
    cameras_section:
      name: "Kameras"
      description: "Kamera- und Bewegungsmelder-Einstellungen."
      icon: mdi:camera
      collapsed: true
      input:
        camera_entities:
          name: "Camera Entities"
          description: "Eine oder mehrere Kameras (Snapshot standardmäßig von der ersten)."
          selector:
            entity:
              multiple: true
              filter:
                domain: camera

        trigger_state:
          name: "Trigger State"
          description: "Automation startet, wenn eine Kamera in diesen Zustand wechselt."
          default: "recording"
          selector:
            text:

        motion_sensors:
          name: "Motion Sensors (optional)"
          description: "Nutzen, wenn Kameras den Zustand nicht ändern. Reihenfolge = Reihenfolge der Kameras."
          default: []
          selector:
            entity:
              multiple: true
              filter:
                domain: binary_sensor

    # =======================
    # SECTION: AI
    # =======================
    ai_section:
      name: "AI"
      description: "Einstellungen für llmvision.stream_analyzer / remember."
      icon: mdi:brain
      collapsed: true
      input:
        ai_enable:
          name: "AI Analyzer aktivieren"
          default: false
          selector:
            boolean:

        ai_run_conditions:
          name: "AI: Bedingungen"
          description: "Alle müssen erfüllt sein, damit die Analyse läuft."
          default: []
          selector:
            condition:

        provider:
          name: "Provider"
          description: "Provider für Analyse (aus llmvision-Integration)."
          selector:
            config_entry:
              integration: llmvision

        model:
          name: "Model"
          description: "Modell (abhängig vom gewählten Provider)."
          default: "gpt-4o-mini"
          selector:
            text:

        ai_message:
          name: "AI: Prompt"
          default: >
            Beschreibe die Ereignisse, als würdest du sie live beobachten.
            Konzentriere dich ausschließlich auf bewegliche Objekte (Personen und Fahrzeuge) und deren Bewegungen oder Interaktionen.
            Ignoriere statische Elemente und die Umgebung vollständig.
            Verwende kurze, prägnante Sätze.
            Erwähne nicht, dass etwas statisch ist oder dass keine Bewegung sichtbar ist – außer es gibt wirklich keine erkennbaren Menschen oder Objekte, dann sage nur -Kein Mensch oder Objekt erkennbar-
          selector:
            text:
              multiline: true

        duration:
          name: "AI: duration (s)"
          default: 3
          selector:
            number:
              min: 1
              max: 60

        max_frames:
          name: "AI: max_frames"
          default: 3
          selector:
            number:
              min: 1
              max: 60

        target_width:
          name: "AI: target_width"
          default: 1280
          selector:
            number:
              min: 512
              max: 3840

        max_tokens:
          name: "AI: max_tokens"
          default: 100
          selector:
            number:
              min: 1
              max: 300

        ai_remember_enable:
          name: "Remember aktivieren"
          description: "llmvision.remember immer ausführen; nutzt Analyzer-Text, wenn vorhanden."
          default: true
          selector:
            boolean:

    # =======================
    # SECTION: BENACHRICHTIGUNGEN
    # =======================
    notifications_section:
      name: "Benachrichtigungen"
      description: "Zustellung, Inhalte, iOS-Optionen und Action-Buttons."
      icon: mdi:bell
      collapsed: true
      input:
        notify:
          name: "Enable Notifications"
          default: true
          selector:
            boolean:

        notify_device:
          name: "Notify Device(s)"
          description: "Zielgeräte (Home Assistant Companion)."
          selector:
            device:
              multiple: true
              filter:
                integration: mobile_app

        notification_time:
          name: "Zeit im Titel (optional)"
          default: ""
          selector:
            select:
              options:
                - label: "No Time Added"
                  value: ""
                - label: "12/24 Hour (de)"
                  value: "um {{ now().strftime('%H:%M') }}"

        tap_navigate:
          name: "Tap / Click Action Path"
          default: "/lovelace/test"
          selector:
            text:

        notification_sound:
          name: "iOS Sound"
          default: "LiquidDetected.caf"
          selector:
            text:

        notification_volume:
          name: "iOS Sound Volume (0..1)"
          default: 1
          selector:
            number:
              min: 0
              max: 1
              step: 0.1

        notification_critical:
          name: "iOS Critical Alert"
          default: false
          selector:
            boolean:

        delay_notification:
          name: "Notification Cooldown (seconds)"
          default: 15
          selector:
            number:
              min: 0
              max: 600
              unit_of_measurement: seconds

        cooldown:
          name: "Global Cooldown"
          default: { seconds: 20 }
          selector:
            duration: {}

        # ----- Dateinamensschema -----
        timestamp_filenames:
          name: "Zeitstempel-Dateinamen verwenden"
          description: "Wenn aktiv, speichert jeden Snapshot als YYYY-MM-DD_HH-MM-SS.jpg."
          default: true
          selector:
            boolean:
        timestamp_format:
          name: "Zeitstempel-Format"
          description: "strftime-Format; Standard: %Y-%m-%d_%H-%M-%S"
          default: "%Y-%m-%d_%H-%M-%S"
          selector:
            text:

        # ----- Actionable Notifications (Option 1–3) -----
        action1_enabled:
          name: "Option 1 aktiv"
          default: false
          selector:
            boolean:
        action1_title:
          name: "Option 1 – Titel"
          default: "Öffnen"
          selector:
            text:
        action1_icon:
          name: "Option 1 – Icon (iOS)"
          description: "z. B. sfsymbols:bell"
          default: ""
          selector:
            text:
        action1_destructive:
          name: "Option 1 – Destructive (rot, iOS)"
          default: false
          selector:
            boolean:
        action1_auth_required:
          name: "Option 1 – Auth required (iOS)"
          default: false
          selector:
            boolean:
        action1_actions:
          name: "Option 1 – HA Action(s)"
          description: "Aktionen, die bei Auswahl ausgeführt werden."
          default: []
          selector:
            action:

        action2_enabled:
          name: "Option 2 aktiv"
          default: false
          selector:
            boolean:
        action2_title:
          name: "Option 2 – Titel"
          default: "Snooze 15 min"
          selector:
            text:
        action2_icon:
          name: "Option 2 – Icon (iOS)"
          default: ""
          selector:
            text:
        action2_destructive:
          name: "Option 2 – Destructive"
          default: false
          selector:
            boolean:
        action2_auth_required:
          name: "Option 2 – Auth required"
          default: false
          selector:
            boolean:
        action2_actions:
          name: "Option 2 – HA Action(s)"
          default: []
          selector:
            action:

        action3_enabled:
          name: "Option 3 aktiv"
          default: false
          selector:
            boolean:
        action3_title:
          name: "Option 3 – Titel"
          default: "Stumm 1h"
          selector:
            text:
        action3_icon:
          name: "Option 3 – Icon (iOS)"
          default: ""
          selector:
            text:
        action3_destructive:
          name: "Option 3 – Destructive"
          default: false
          selector:
            boolean:
        action3_auth_required:
          name: "Option 3 – Auth required"
          default: false
          selector:
            boolean:
        action3_actions:
          name: "Option 3 – HA Action(s)"
          default: []
          selector:
            action:

        actions_wait_timeout:
          name: "Warten auf Antwort (Timeout)"
          description: "Wenn > 0, wartet die Automation auf mobile_app_notification_action und führt die zugehörigen HA-Aktionen aus."
          default: { minutes: 0, seconds: 0 }
          selector:
            duration: {}

    # =======================
    # SECTION: SONSTIGES
    # =======================
    misc_section:
      name: "Sonstiges"
      description: "Diverse Einstellungen."
      icon: mdi:cog
      collapsed: true
      input: {}

# ================= Variables =================
variables:
  # Inputs
  notify: !input notify
  delay_notification: !input delay_notification
  notification_time: !input notification_time
  tap_navigate: !input tap_navigate

  notification_sound: !input notification_sound
  notification_volume: !input notification_volume
  notification_critical: !input notification_critical

  camera_entities_list: !input camera_entities
  motion_sensors_list: !input motion_sensors
  notify_devices: !input notify_device

  # AI inputs
  ai_enable: !input ai_enable
  ai_run_conditions: !input ai_run_conditions
  provider: !input provider
  model: !input model
  ai_message: !input ai_message
  duration: !input duration
  max_frames: !input max_frames
  target_width: !input target_width
  max_tokens: !input max_tokens
  ai_remember_enable: !input ai_remember_enable

  # Notif: timestamp
  timestamp_filenames: !input timestamp_filenames
  timestamp_format: !input timestamp_format

  # Actionable Inputs
  action1_enabled: !input action1_enabled
  action1_title: !input action1_title
  action1_icon: !input action1_icon
  action1_destructive: !input action1_destructive
  action1_auth_required: !input action1_auth_required
  action1_actions: !input action1_actions

  action2_enabled: !input action2_enabled
  action2_title: !input action2_title
  action2_icon: !input action2_icon
  action2_destructive: !input action2_destructive
  action2_auth_required: !input action2_auth_required
  action2_actions: !input action2_actions

  action3_enabled: !input action3_enabled
  action3_title: !input action3_title
  action3_icon: !input action3_icon
  action3_destructive: !input action3_destructive
  action3_auth_required: !input action3_auth_required
  action3_actions: !input action3_actions

  actions_wait_timeout: !input actions_wait_timeout

  # Kamera aus Trigger ableiten (Sensor→Index→Kamera)
  camera_entity_snapshot: >
    {% if trigger is defined and trigger.entity_id %}
      {% set tid = trigger.entity_id %}
      {% if tid.startswith('binary_sensor') and (tid in motion_sensors_list) %}
        {% set i = motion_sensors_list.index(tid) %}
        {{ camera_entities_list[i] if camera_entities_list|length > i else (camera_entities_list[0] if camera_entities_list|length>0 else '') }}
      {% elif tid.startswith('camera.') %}
        {{ tid }}
      {% else %}
        {{ camera_entities_list[0] if camera_entities_list|length>0 else '' }}
      {% endif %}
    {% else %}
      {{ camera_entities_list[0] if camera_entities_list|length>0 else '' }}
    {% endif %}

  # Friendly Name + Pfade/Dateinamen (LLMVISION-DIR)
  camera_friendly: "{{ state_attr(camera_entity_snapshot, 'friendly_name') or 'Kamera' }}"
  camera_file_path: "{{ camera_friendly | slugify }}"
  snapshot_dir_fs: "/config/www/llmvision/{{ camera_file_path }}"
  snapshot_dir_web: "/local/llmvision/{{ camera_file_path }}"
  snapshot_filename: "{{ (timestamp_filenames and now().strftime(timestamp_format) or 'last_motion') ~ '.jpg' }}"
  file_path: "{{ snapshot_dir_fs ~ '/' ~ snapshot_filename }}"
  snapshot_access_file_path: "{{ snapshot_dir_web ~ '/' ~ snapshot_filename }}"

  # Notification-Metadaten
  label: "Bewegung erkannt"
  camera: "{{ camera_friendly }}"
  notification_tag: "{{ camera_file_path ~ '_' ~ now().timestamp()|int }}"

  # iOS Notify-Dienste (mobile_app_<slug>)
  device_name_map: >
    {% set ns = namespace(device_names=[]) %}
    {% for dev in (notify_devices or []) %}
      {% set name = device_attr(dev, 'name') %}
      {% if name %}
        {% set ns.device_names = ns.device_names + ['mobile_app_' ~ (name | slugify)] %}
      {% endif %}
    {% endfor %}
    {{ ns.device_names }}

  # Action-IDs je Option (eindeutig pro Kamera)
  first_option: "{{ camera_file_path ~ '_ACTION_1' }}"
  second_option: "{{ camera_file_path ~ '_ACTION_2' }}"
  third_option:  "{{ camera_file_path ~ '_ACTION_3' }}"

  # Option-Dicts (vollständig)
  option_one: >
    {{ {
      'enabled': action1_enabled,
      'action': first_option,
      'title': action1_title,
      'icon': action1_icon,
      'destructive': action1_destructive,
      'authenticationRequired': action1_auth_required,
      'actions': action1_actions
    } }}
  option_two: >
    {{ {
      'enabled': action2_enabled,
      'action': second_option,
      'title': action2_title,
      'icon': action2_icon,
      'destructive': action2_destructive,
      'authenticationRequired': action2_auth_required,
      'actions': action2_actions
    } }}
  option_three: >
    {{ {
      'enabled': action3_enabled,
      'action': third_option,
      'title': action3_title,
      'icon': action3_icon,
      'destructive': action3_destructive,
      'authenticationRequired': action3_auth_required,
      'actions': action3_actions
    } }}
  notification_actions: >
    {{ [option_one, option_two, option_three] | selectattr('enabled') | list }}

# ================= Meta =================
mode: queued
max: 25
max_exceeded: silent

# ================= Trigger =================
trigger:
  - platform: state
    entity_id: !input camera_entities
    to: !input trigger_state
    id: "camera_trigger"
  - platform: state
    entity_id: !input motion_sensors
    to: "on"
    id: "motion_sensor_trigger"

# ================= Actions =================
action:
  - if:
      - condition: template
        value_template: "{{ notify }}"
    then:
      - if:
          - condition: template
            value_template: >
              {{ not this.attributes.last_triggered
                 or (now() - this.attributes.last_triggered).seconds > delay_notification }}
        then:
          # 1) Snapshot
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ camera_entity_snapshot != '' }}"
                sequence:
                  - service: camera.snapshot
                    target:
                      entity_id: "{{ camera_entity_snapshot }}"
                    data:
                      filename: "{{ file_path }}"

          # 2) Erste Push (mit Tag, Group & Actions)
          - alias: "Notify initial (iOS, Snapshot Attachment, with Tag)"
            repeat:
              for_each: "{{ device_name_map }}"
              sequence:
                - service: "notify.{{ repeat.item }}"
                  data:
                    title: "{{ camera }} - {{ label }} {{ notification_time }}"
                    message: "{{ camera }} hat eine Bewegung erkannt."
                    data:
                      url: !input tap_navigate
                      clickAction: !input tap_navigate
                      tag: "{{ notification_tag }}"
                      group: "cams"
                      attachment:
                        url: "{{ snapshot_access_file_path }}"
                        content_type: JPEG
                      actions: "{{ notification_actions }}"
                      push:
                        interruption-level: time-sensitive
                        sound:
                          name: "{{ notification_sound }}"
                          volume: "{{ notification_volume }}"
                          critical: "{{ notification_critical }}"

          # 3) Optional: AI-Analyse (wenn eingeschaltet + Bedingungen erfüllt)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ ai_enable }}"
                  - condition: and
                    conditions: !input ai_run_conditions
                sequence:
                  - action: llmvision.stream_analyzer
                    metadata: {}
                    data:
                      image_entity:
                        - "{{ camera_entity_snapshot }}"
                      duration: "{{ duration }}"
                      provider: !input provider
                      model: !input model
                      message: "{{ ai_message }}"
                      include_filename: true
                      max_frames: "{{ max_frames }}"
                      target_width: "{{ target_width }}"
                      max_tokens: "{{ max_tokens }}"
                    response_variable: response

          # 4) Remember (immer, wenn aktiviert)
          - if:
              - condition: template
                value_template: "{{ ai_remember_enable }}"
            then:
              - action: llmvision.remember
                metadata: {}
                data:
                  title: "{{ camera }} - {{ label }} {{ notification_time }}"
                  image_path: "{{ camera_file_path }}/{{ snapshot_filename }}"
                  camera_entity: "{{ camera_entity_snapshot }}"
                  summary: "{{ response.response_text if (ai_enable and response is defined and response.response_text is defined) else 'Bewegung erkannt (nicht analysiert)' }}"

          # 5) Update-Push (wenn AI gelaufen ist)
          - if:
              - condition: template
                value_template: "{{ ai_enable and response is defined and response.response_text is defined }}"
            then:
              - alias: "Notify update (same Tag, Analyzer Response)"
                repeat:
                  for_each: "{{ device_name_map }}"
                  sequence:
                    - service: "notify.{{ repeat.item }}"
                      data:
                        title: "{{ camera }} - {{ label }} {{ notification_time }}"
                        message: "{{ response.response_text }}"
                        data:
                          url: !input tap_navigate
                          clickAction: !input tap_navigate
                          tag: "{{ notification_tag }}"
                          group: "cams"
                          attachment:
                            url: "{{ snapshot_access_file_path }}"
                            content_type: JPEG
                          actions: "{{ notification_actions }}"
                          push:
                            interruption-level: time-sensitive
                            sound:
                              name: "{{ notification_sound }}"
                              volume: "{{ notification_volume }}"
                              critical: "{{ notification_critical }}"

          # 6) (Optional) Auf Antwort der Action-Buttons warten und HA-Aktionen ausführen
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ (actions_wait_timeout.hours + actions_wait_timeout.minutes + actions_wait_timeout.seconds) > 0 }}
                sequence:
                  - wait_for_trigger:
                      - platform: event
                        event_type: mobile_app_notification_action
                        event_data:
                          action: "{{ first_option }}"
                      - platform: event
                        event_type: mobile_app_notification_action
                        event_data:
                          action: "{{ second_option }}"
                      - platform: event
                        event_type: mobile_app_notification_action
                        event_data:
                          action: "{{ third_option }}"
                    timeout: "{{ actions_wait_timeout }}"
                    continue_on_timeout: true

                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ wait.trigger is not none and wait.trigger.event.data.action == first_option }}"
                        sequence: !input action1_actions
                      - conditions:
                          - condition: template
                            value_template: "{{ wait.trigger is not none and wait.trigger.event.data.action == second_option }}"
                        sequence: !input action2_actions
                      - conditions:
                          - condition: template
                            value_template: "{{ wait.trigger is not none and wait.trigger.event.data.action == third_option }}"
                        sequence: !input action3_actions

  # 7) Globaler Cooldown
  - delay: !input cooldown
