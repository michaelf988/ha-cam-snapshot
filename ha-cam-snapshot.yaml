blueprint:
  name: "Camera Event Notification 1.5.0"
  author: "MF"
  homeassistant:
    min_version: 2024.10.0
  description: >
    iOS-Kamera-Benachrichtigung mit Snapshot, Wichtigkeitsanalyse (llmvision.image_analyzer),
    optionaler Live-Analyse (llmvision.stream_analyzer), automatischem Erinnern (llmvision.remember)
    und Update der Push via Tag. Gate mit Zusatzbedingungen; dynamisches Interruption-Level aus der
    Wichtigkeitsanalyse. Action-Buttons ohne internes Warten (Events separat abfangbar).
  domain: automation
  source_url: https://github.com/michaelf988/ha-cam-snapshot/blob/main/ha-cam-snapshot.yaml

  input:

    # =======================
    # SECTION: KAMERAS
    # =======================
    cameras_section:
      name: "Kameras"
      description: "Kamera- und Bewegungsmelder-Einstellungen."
      icon: mdi:camera
      collapsed: true
      input:
        camera_entities:
          name: "Camera Entities"
          description: "Eine oder mehrere Kameras (Snapshot standardmäßig von der ersten)."
          selector:
            entity:
              multiple: true
              filter:
                domain: camera

        trigger_state:
          name: "Trigger State"
          description: "Automation startet, wenn eine Kamera in diesen Zustand wechselt."
          default: "recording"
          selector:
            text:

        motion_sensors:
          name: "Motion Sensors (optional)"
          description: "Nutzen, wenn Kameras den Zustand nicht ändern. Reihenfolge = Reihenfolge der Kameras."
          default: []
          selector:
            entity:
              multiple: true
              filter:
                domain: binary_sensor

    # =======================
    # SECTION: SPEICHERUNG
    # =======================
    storage_section:
      name: "Speicherung"
      description: "Dateinamen & Pfade für Snapshots."
      icon: mdi:folder
      collapsed: true
      input:
        timestamp_filenames:
          name: "Zeitstempel-Dateinamen verwenden"
          description: "Wenn aktiv, speichert jeden Snapshot als YYYY-MM-DD_HH-MM-SS.jpg."
          default: true
          selector:
            boolean:
        timestamp_format:
          name: "Zeitstempel-Format"
          description: "strftime-Format; Standard: %Y-%m-%d_%H-%M-%S"
          default: "%Y-%m-%d_%H-%M-%S"
          selector:
            text:

        snapshot_dir_fs:
          name: "Basis-Pfad (Dateisystem)"
          description: "Ohne Kamera-Slug; z. B. /config/www/llmvision"
          default: "/config/www/llmvision"
          selector:
            text:
        snapshot_dir_web:
          name: "Basis-Pfad (Web)"
          description: "Ohne Kamera-Slug; z. B. /local/llmvision"
          default: "/local/llmvision"
          selector:
            text:

    # =======================
    # SECTION: AI (Bild-/Stream-Analyse)
    # =======================
    ai_section:
      name: "AI"
      description: "Vorklassifizierung (image_analyzer) & Live-Analyse (stream_analyzer)."
      icon: mdi:brain
      collapsed: true
      input:
        # --- Vorklassifizierung (Image Analyzer) ---
        importance_enable:
          name: "Wichtigkeits-Check aktivieren (image_analyzer)"
          default: false
          selector:
            boolean:

        importance_run_conditions:
          name: "Bedingungen für Wichtigkeits-Check"
          description: "Alle Bedingungen müssen erfüllt sein, damit image_analyzer läuft."
          default: []
          selector:
            condition:

        importance_prompt:
          name: "Prompt für Wichtigkeits-Check"
          description: >
            Liefert genau eines der Wörter: passive, active, time-sensitive, critical.
            Mapping: passive=keine Person; active=wahrscheinlich Person; time-sensitive=definitiv Person; critical=Person ODER gefährliche Situation.
          default: >
            Classify the security event based on this image. Respond with exactly one of:
            "passive" (no person), "active" (probably a person), "time-sensitive" (definitely a person),
            or "critical" (definitely a person OR dangerous situation like burglary or fire). No extra words.
          selector:
            text:
              multiline: true

        # Klassen-Bedingungen
        importance_conditions_passive:
          name: "Bedingungen für PASSIVE"
          description: "Optional – ändert nichts (bleibt passive), dient nur zu Tests/Transparenz."
          default: []
          selector:
            condition:
        importance_conditions_active:
          name: "Bedingungen für ACTIVE"
          description: "Wenn NICHT erfüllt, wird Benachrichtigung auf PASSIVE zurückgestuft."
          default: []
          selector:
            condition:
        importance_conditions_timesensitive:
          name: "Bedingungen für TIME-SENSITIVE"
          description: "Wenn NICHT erfüllt, wird Benachrichtigung auf PASSIVE zurückgestuft."
          default: []
          selector:
            condition:

        # Gate
        importance_gate_enable:
          name: "Nur wichtige Ereignisse weiterverarbeiten (Gate)"
          description: >
            Wenn aktiv, wird die Automation NUR fortgesetzt, wenn das Ereignis mindestens "time-sensitive" ist.
            Bei weniger Wichtigkeit (passive/active) wird die Pipeline gestoppt – ABER 'remember' läuft trotzdem (falls aktiviert).
          default: false
          selector:
            boolean:
        importance_gate_conditions:
          name: "Gate: Zusätzliche Bedingungen"
          description: "Diese Bedingungen müssen zusätzlich erfüllt sein, damit das Gate greift."
          default: []
          selector:
            condition:

        # Kritisch erzwingen → Stream
        ai_force_on_critical:
          name: "Stream-Analyse erzwingen bei 'critical'"
          description: "Ignoriere ai_enable & Zusatzbedingungen, wenn die Wichtigkeitsanalyse 'critical' ergibt."
          default: true
          selector:
            boolean:

        # --- Stream Analyzer (optional) ---
        ai_enable:
          name: "AI Stream Analyzer aktivieren"
          default: false
          selector:
            boolean:

        ai_run_conditions:
          name: "AI: Bedingungen (Stream)"
          description: "Alle müssen erfüllt sein, damit die Live-Analyse läuft."
          default: []
          selector:
            condition:

        provider:
          name: "Provider"
          description: "Provider für Analyse (aus llmvision-Integration)."
          selector:
            config_entry:
              integration: llmvision

        model:
          name: "Model"
          description: "Modell (abhängig vom gewählten Provider)."
          default: "gpt-4o-mini"
          selector:
            text:

        ai_message:
          name: "AI: Prompt (Stream Analyzer, sehr kurz)"
          description: "Sehr kurze, knappe Erkennungsausgabe."
          default: >
            Antworte NUR mit einem der folgenden kurzen Stichwörter (Deutsch), ohne Zusatz:
            "Person erkannt", "Fahrzeug erkannt", "Person & Fahrzeug", "Mehrere Personen",
            "Tier erkannt", "Unklar", "Keine relevante Bewegung".
          selector:
            text:
              multiline: true

        duration:
          name: "AI: duration (s)"
          default: 3
          selector:
            number:
              min: 1
              max: 60

        max_frames:
          name: "AI: max_frames"
          default: 3
          selector:
            number:
              min: 1
              max: 60

        target_width:
          name: "AI: target_width"
          default: 1280
          selector:
            number:
              min: 512
              max: 3840

        max_tokens:
          name: "AI: max_tokens"
          default: 100
          selector:
            number:
              min: 1
              max: 300

        ai_remember_enable:
          name: "Remember aktivieren"
          description: "llmvision.remember immer ausführen; nutzt Analyzer-Text, wenn vorhanden."
          default: true
          selector:
            boolean:

    # =======================
    # SECTION: BENACHRICHTIGUNGEN
    # =======================
    notifications_section:
      name: "Benachrichtigungen"
      description: "Zustellung, Inhalte, iOS-Optionen und Action-Buttons."
      icon: mdi:bell
      collapsed: true
      input:
        notify:
          name: "Enable Notifications"
          default: true
          selector:
            boolean:

        notify_device:
          name: "Notify Device(s)"
          description: "Zielgeräte (Home Assistant Companion)."
          selector:
            device:
              multiple: true
              filter:
                integration: mobile_app

        notify_groups:
          name: "Notify-Gruppen (optional)"
          description: "Kommagetrennte Service-Namen ohne Leerzeichen, z. B.: notify.family,notify.ios_all"
          default: ""
          selector:
            text:

        notification_time:
          name: "Zeit im Titel (optional)"
          default: ""
          selector:
            select:
              options:
                - label: "No Time Added"
                  value: ""
                - label: "12/24 Hour (de)"
                  value: "um {{ now().strftime('%H:%M') }}"

        tap_navigate:
          name: "Tap / Click Action Path"
          default: "/lovelace/test"
          selector:
            text:

        notification_sound:
          name: "iOS Sound"
          default: "LiquidDetected.caf"
          selector:
            text:

        notification_volume:
          name: "iOS Sound Volume (0..1)"
          default: 1
          selector:
            number:
              min: 0
              max: 1
              step: 0.1

        delay_notification:
          name: "Notification Cooldown (seconds)"
          description: "Lokaler Throttle: Verhindert unmittelbare Doppel-Trigger (prüft last_triggered)."
          default: 15
          selector:
            number:
              min: 0
              max: 600
              unit_of_measurement: seconds

        # ----- Actionable Notifications (Option 1–3) -----
        action1_enabled:
          name: "Option 1 aktiv"
          default: false
          selector:
            boolean:
        action1_title:
          name: "Option 1 – Titel"
          default: "Öffnen"
          selector:
            text:
        action1_icon:
          name: "Option 1 – Icon (iOS)"
          description: "z. B. sfsymbols:bell"
          default: ""
          selector:
            text:
        action1_destructive:
          name: "Option 1 – Destructive (rot, iOS)"
          default: false
          selector:
            boolean:
        action1_auth_required:
          name: "Option 1 – Auth required (iOS)"
          default: false
          selector:
            boolean:

        action2_enabled:
          name: "Option 2 aktiv"
          default: false
          selector:
            boolean:
        action2_title:
          name: "Option 2 – Titel"
          default: "Snooze 15 min"
          selector:
            text:
        action2_icon:
          name: "Option 2 – Icon (iOS)"
          default: ""
          selector:
            text:
        action2_destructive:
          name: "Option 2 – Destructive"
          default: false
          selector:
            boolean:
        action2_auth_required:
          name: "Option 2 – Auth required"
          default: false
          selector:
            boolean:

        action3_enabled:
          name: "Option 3 aktiv"
          default: false
          selector:
            boolean:
        action3_title:
          name: "Option 3 – Titel"
          default: "Stumm 1h"
          selector:
            text:
        action3_icon:
          name: "Option 3 – Icon (iOS)"
          default: ""
          selector:
            text:
        action3_destructive:
          name: "Option 3 – Destructive"
          default: false
          selector:
            boolean:
        action3_auth_required:
          name: "Option 3 – Auth required"
          default: false
          selector:
            boolean:

    # =======================
    # SECTION: SONSTIGES
    # =======================
    misc_section:
      name: "Sonstiges"
      description: "Diverse Einstellungen."
      icon: mdi:cog
      collapsed: true
      input:
        cooldown:
          name: "Global Cooldown"
          description: "Pausiert die Automation am Ende (unabhängig vom lokalen Throttle)."
          default: { seconds: 20 }
          selector:
            duration: {}
        debug_notify_passive:
          name: "Debug: Push auch bei 'passive' senden"
          description: "Wenn aktiv, wird auch bei PASSIVE eine Push gesendet (sofern Gate nicht greift)."
          default: false
          selector:
            boolean:

# ================= Variables =================
variables:
  # Inputs
  notify: !input notify
  delay_notification: !input delay_notification
  notification_time: !input notification_time
  tap_navigate: !input tap_navigate

  notification_sound: !input notification_sound
  notification_volume: !input notification_volume

  camera_entities_list: !input camera_entities
  motion_sensors_list: !input motion_sensors
  notify_devices: !input notify_device
  notify_groups_raw: !input notify_groups

  # AI inputs
  importance_enable: !input importance_enable
  importance_run_conditions: !input importance_run_conditions
  importance_prompt: !input importance_prompt

  importance_conditions_passive: !input importance_conditions_passive
  importance_conditions_active: !input importance_conditions_active
  importance_conditions_timesensitive: !input importance_conditions_timesensitive

  importance_gate_enable: !input importance_gate_enable
  importance_gate_conditions: !input importance_gate_conditions

  ai_force_on_critical: !input ai_force_on_critical

  ai_enable: !input ai_enable
  ai_run_conditions: !input ai_run_conditions
  provider: !input provider
  model: !input model
  ai_message: !input ai_message
  duration: !input duration
  max_frames: !input max_frames
  target_width: !input target_width
  max_tokens: !input max_tokens
  ai_remember_enable: !input ai_remember_enable

  # Storage inputs
  timestamp_filenames: !input timestamp_filenames
  timestamp_format: !input timestamp_format
  snapshot_dir_fs_base: !input snapshot_dir_fs
  snapshot_dir_web_base: !input snapshot_dir_web

  # Sonstiges
  cooldown: !input cooldown
  debug_notify_passive: !input debug_notify_passive

  # Kamera aus Trigger ableiten (Sensor→Index→Kamera)
  camera_entity_snapshot: >
    {% if trigger is defined and trigger.entity_id %}
      {% set tid = trigger.entity_id %}
      {% if tid.startswith('binary_sensor') and (tid in motion_sensors_list) %}
        {% set i = motion_sensors_list.index(tid) %}
        {{ camera_entities_list[i] if camera_entities_list|length > i else (camera_entities_list[0] if camera_entities_list|length>0 else '') }}
      {% elif tid.startswith('camera.') %}
        {{ tid }}
      {% else %}
        {{ camera_entities_list[0] if camera_entities_list|length>0 else '' }}
      {% endif %}
    {% else %}
      {{ camera_entities_list[0] if camera_entities_list|length>0 else '' }}
    {% endif %}

  # Friendly Name + Pfade/Dateinamen (LLMVISION-DIR)
  camera_friendly: "{{ state_attr(camera_entity_snapshot, 'friendly_name') or 'Kamera' }}"
  camera_file_path: "{{ camera_friendly | slugify }}"
  snapshot_dir_fs_final: "{{ (snapshot_dir_fs_base.rstrip('/')) ~ '/' ~ camera_file_path }}"
  snapshot_dir_web_final: "{{ (snapshot_dir_web_base.rstrip('/')) ~ '/' ~ camera_file_path }}"
  snapshot_filename: "{{ (timestamp_filenames and now().strftime(timestamp_format) or 'last_motion') ~ '.jpg' }}"
  file_path: "{{ snapshot_dir_fs_final ~ '/' ~ snapshot_filename }}"
  snapshot_access_file_path: "{{ snapshot_dir_web_final ~ '/' ~ snapshot_filename }}"

  # Notification-Metadaten
  label: "Bewegung erkannt"
  camera: "{{ camera_friendly }}"
  notification_tag: "{{ camera_file_path ~ '_' ~ now().timestamp()|int }}"

  # Kritikalität: helper (für OR in Schritt 4)
  importance_is_critical: >
    {% if importance is defined and importance.response_text %}
      {{ 'critical' in (importance.response_text | lower) }}
    {% else %}false{% endif %}

  # Action-IDs (fix für externe Automationen)
  first_option: "ACTION_1"
  second_option: "ACTION_2"
  third_option:  "ACTION_3"

  # Robuste Liste gültiger mobile_app Notify-Services
  device_name_map: >
    {% set ns = namespace(device_names=[]) %}
    {% for dev in (notify_devices or []) %}
      {% set name = device_attr(dev, 'name') | default('', true) %}
      {% set slug = (name | slugify) | default('', true) %}
      {% if slug and (slug | length > 0) %}
        {% set ns.device_names = ns.device_names + ['mobile_app_' ~ slug] %}
      {% endif %}
    {% endfor %}
    {{ ns.device_names }}

  # Notify-Gruppen aus Textfeld (notify.xyz → nur Suffix als Service-Name)
  notify_group_services: >
    {% set raw = notify_groups_raw | default('', true) %}
    {% set parts = raw.split(',') if raw|length>0 else [] %}
    {% set cleaned = [] %}
    {% for p in parts %}
      {% set s = p|trim %}
      {% if s and s.startswith('notify.') and (s|length > 7) %}
        {% set cleaned = cleaned + [ s[7:] ] %}
      {% endif %}
    {% endfor %}
    {{ cleaned }}

  # Gesamte Ziel-Services (Geräte + Gruppen)
  notify_services_all: "{{ (device_name_map + notify_group_services) }}"

# ================= Meta =================
mode: queued
max: 25
max_exceeded: silent

# ================= Trigger =================
trigger:
  - platform: state
    entity_id: !input camera_entities
    to: !input trigger_state
    id: "camera_trigger"
  - platform: state
    entity_id: !input motion_sensors
    to: "on"
    id: "motion_sensor_trigger"

# ================= Actions =================
action:
  - if:
      - condition: template
        value_template: "{{ notify }}"
    then:
      - if:
          - condition: template
            value_template: >
              {{ not this.attributes.last_triggered
                 or (now() - this.attributes.last_triggered).seconds > delay_notification }}
        then:

          # 1) Snapshot
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ camera_entity_snapshot != '' }}"
                sequence:
                  - service: camera.snapshot
                    target:
                      entity_id: "{{ camera_entity_snapshot }}"
                    data:
                      filename: "{{ file_path }}"

          # 2) Wichtigkeits-Analyse (image_analyzer) – optional, nutzt den erzeugten Snapshot (file_path)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ importance_enable }}"
                  - condition: and
                    conditions: !input importance_run_conditions
                sequence:
                  - action: llmvision.image_analyzer
                    metadata: {}
                    data:
                      image_file: "{{ file_path }}"
                      provider: !input provider
                      model: !input model
                      message: "{{ importance_prompt }}"
                      include_filename: true
                      target_width: !input target_width
                      max_tokens: !input max_tokens
                    response_variable: importance

          # 2b) Vorschlag normalisieren
          - variables:
              importance_suggested_level: >
                {% set fallback = 'time-sensitive' %}
                {% if importance is defined and importance.response_text %}
                  {% set t = importance.response_text | lower %}
                  {% if 'critical' in t %}critical
                  {% elif 'time-sensitive' in t or 'time sensitive' in t %}time-sensitive
                  {% elif 'active' in t %}active
                  {% elif 'passive' in t %}passive
                  {% else %}{{ fallback }}{% endif %}
                {% else %}{{ fallback }}{% endif %}

          # 2c) Endgültiges notification_level anhand Klassen-Bedingungen bestimmen (sonst: passive)
          - variables:
              notification_level: "passive"
          - choose:
              # CRITICAL: immer durchlassen
              - conditions:
                  - condition: template
                    value_template: "{{ importance_suggested_level == 'critical' }}"
                sequence:
                  - variables:
                      notification_level: "critical"

              # TIME-SENSITIVE: nur wenn Bedingungen erfüllt, sonst passive
              - conditions:
                  - condition: template
                    value_template: "{{ importance_suggested_level == 'time-sensitive' }}"
                  - condition: and
                    conditions: !input importance_conditions_timesensitive
                sequence:
                  - variables:
                      notification_level: "time-sensitive"

              # ACTIVE: nur wenn Bedingungen erfüllt, sonst passive
              - conditions:
                  - condition: template
                    value_template: "{{ importance_suggested_level == 'active' }}"
                  - condition: and
                    conditions: !input importance_conditions_active
                sequence:
                  - variables:
                      notification_level: "active"

              # PASSIVE: optionale Bedingungen, bleibt passive
              - conditions:
                  - condition: template
                    value_template: "{{ importance_suggested_level == 'passive' }}"
                  - condition: and
                    conditions: !input importance_conditions_passive
                sequence:
                  - variables:
                      notification_level: "passive"

          # 3) Gate: Nur wichtige Ereignisse weiterverarbeiten? (>= time-sensitive) + Gate-Bedingungen
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ importance_gate_enable }}"
                  - condition: and
                    conditions: !input importance_gate_conditions
                  - condition: template
                    value_template: "{{ notification_level in ['passive','active'] }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ ai_remember_enable }}"
                    then:
                      - action: llmvision.remember
                        metadata: {}
                        data:
                          title: "{{ camera }} - {{ label }} {{ notification_time }}"
                          image_path: "{{ file_path }}"
                          camera_entity: "{{ camera_entity_snapshot }}"
                          summary: >
                            {{ importance.response_text if (importance is defined and importance.response_text) else 'Bewegung erkannt (nicht analysiert)' }}
                  - stop: "Gate aktiv: Ereignis nicht wichtig genug ({{ notification_level }})."

          # 3) Erste Push (mit dynamischem interruption-level + Klasse im Text + Actions)
          - alias: "Notify initial (iOS, Snapshot Attachment, with Tag & dynamic level)"
            repeat:
              for_each: "{{ notify_services_all }}"
              sequence:
                - service: "notify.{{ repeat.item }}"
                  data:
                    title: "{{ camera }} - {{ label }} {{ notification_time }}"
                    message: >
                      {% if notification_level == 'passive' and not debug_notify_passive %}
                        {{ 'Bewegung erkannt (gefiltert)' }}
                      {% else %}
                        {{ 'Bewegung erkannt (' ~ notification_level ~ ').' }}
                      {% endif %}
                    data:
                      url: !input tap_navigate
                      clickAction: !input tap_navigate
                      tag: "{{ notification_tag }}"
                      group: "cams"
                      attachment:
                        url: "{{ snapshot_access_file_path }}"
                        content_type: JPEG
                      actions: >
                        {% set out = [] %}
                        {% if action1_enabled %}
                          {% set _ = out.append({
                            'action': first_option,
                            'title': action1_title,
                            'icon': action1_icon,
                            'destructive': action1_destructive,
                            'authenticationRequired': action1_auth_required
                          }) %}
                        {% endif %}
                        {% if action2_enabled %}
                          {% set _ = out.append({
                            'action': second_option,
                            'title': action2_title,
                            'icon': action2_icon,
                            'destructive': action2_destructive,
                            'authenticationRequired': action2_auth_required
                          }) %}
                        {% endif %}
                        {% if action3_enabled %}
                          {% set _ = out.append({
                            'action': third_option,
                            'title': action3_title,
                            'icon': action3_icon,
                            'destructive': action3_destructive,
                            'authenticationRequired': action3_auth_required
                          }) %}
                        {% endif %}
                        {{ out }}
                      push:
                        interruption-level: "{{ notification_level }}"
                        sound:
                          name: "{{ notification_sound }}"
                          volume: "{{ notification_volume }}"
                          critical: "{{ notification_level == 'critical' }}"

          # 4) AI-Stream-Analyse (einmalig): erzwungen bei 'critical' ODER normal via ai_enable+conditions
          - choose:
              - conditions:
                  - condition: or
                    conditions:
                      # a) erzwungen bei critical
                      - condition: and
                        conditions:
                          - condition: template
                            value_template: "{{ ai_force_on_critical }}"
                          - condition: template
                            value_template: "{{ importance_is_critical }}"
                          - condition: template
                            value_template: "{{ camera_entity_snapshot != '' }}"
                      # b) normal via ai_enable + conditions
                      - condition: and
                        conditions:
                          - condition: template
                            value_template: "{{ ai_enable }}"
                          - condition: and
                            conditions: !input ai_run_conditions
                          - condition: template
                            value_template: "{{ camera_entity_snapshot != '' }}"
                sequence:
                  - action: llmvision.stream_analyzer
                    metadata: {}
                    data:
                      image_entity:
                        - "{{ camera_entity_snapshot }}"
                      duration: !input duration
                      provider: !input provider
                      model: !input model
                      message: "{{ ai_message }}"
                      include_filename: true
                      max_frames: !input max_frames
                      target_width: !input target_width
                      max_tokens: !input max_tokens
                    response_variable: response

          # 5) Remember: immer (falls aktiviert) – nutzt Stream- oder Importance-Text
          - if:
              - condition: template
                value_template: "{{ ai_remember_enable }}"
            then:
              - action: llmvision.remember
                metadata: {}
                data:
                  title: "{{ camera }} - {{ label }} {{ notification_time }}"
                  image_path: "{{ file_path }}"
                  camera_entity: "{{ camera_entity_snapshot }}"
                  summary: >
                    {% if response is defined and response.response_text is defined %}
                      {{ response.response_text }}
                    {% elif importance is defined and importance.response_text %}
                      {{ importance.response_text }}
                    {% else %}
                      Bewegung erkannt (nicht analysiert)
                    {% endif %}

          # 5) Update-Push (falls Stream-Analyse gelaufen ist) – Klasse bleibt angehängt + Actions erneut
          - if:
              - condition: template
                value_template: "{{ response is defined and response.response_text is defined }}"
            then:
              - alias: "Notify update (same Tag, Analyzer Response, dynamic level)"
                repeat:
                  for_each: "{{ notify_services_all }}"
                  sequence:
                    - service: "notify.{{ repeat.item }}"
                      data:
                        title: "{{ camera }} - {{ label }} {{ notification_time }}"
                        message: "{{ response.response_text }} ({{ notification_level }})"
                        data:
                          url: !input tap_navigate
                          clickAction: !input tap_navigate
                          tag: "{{ notification_tag }}"
                          group: "cams"
                          attachment:
                            url: "{{ snapshot_access_file_path }}"
                            content_type: JPEG
                          actions: >
                            {% set out = [] %}
                            {% if action1_enabled %}
                              {% set _ = out.append({
                                'action': first_option,
                                'title': action1_title,
                                'icon': action1_icon,
                                'destructive': action1_destructive,
                                'authenticationRequired': action1_auth_required
                              }) %}
                            {% endif %}
                            {% if action2_enabled %}
                              {% set _ = out.append({
                                'action': second_option,
                                'title': action2_title,
                                'icon': action2_icon,
                                'destructive': action2_destructive,
                                'authenticationRequired': action2_auth_required
                              }) %}
                            {% endif %}
                            {% if action3_enabled %}
                              {% set _ = out.append({
                                'action': third_option,
                                'title': action3_title,
                                'icon': action3_icon,
                                'destructive': action3_destructive,
                                'authenticationRequired': action3_auth_required
                              }) %}
                            {% endif %}
                            {{ out }}
                          push:
                            interruption-level: "{{ notification_level }}"
                            sound:
                              name: "{{ notification_sound }}"
                              volume: "{{ notification_volume }}"
                              critical: "{{ notification_level == 'critical' }}"

  # 6) Globaler Cooldown
  - delay: !input cooldown
